----  changing table name

EXEC sp_rename 'tmdb_5000_movies$', 'Movie_Rating'


---- changing column value

ALTER TABLE Movie_Rating
ALTER COLUMN release_date date

---- data exploration
---- movies count in the dataset


SELECT count(*) MovieCount
FROM Movie_Rating


---- 10 movies with the highest revenue


SELECT TOP 10 movie_title, FORMAT(MAX(revenue), 'N0') AS HighestRevenue
FROM Movie_Rating
GROUP BY movie_title
ORDER BY MAX(revenue) DESC


---- top 5 movies with the highest budget


SELECT TOP 5 movie_title, FORMAT(MAX(budget), 'N0') HighestBudget
FROM Movie_Rating
GROUP BY movie_title
ORDER BY MAX(budget) DESC


---- average runtime for movies


-- for all movies
SELECT CONCAT(CEILING(AVG(runtime)), ' minutes') AS AverageRuntime
FROM Movie_Rating
-- for action movies  
SELECT CONCAT(CEILING(AVG(runtime)), ' minutes') AS AverageRuntime
FROM Movie_Rating
WHERE genres LIKE '%action%'
-- for animation movies
SELECT CONCAT(CEILING(AVG(runtime)), ' minutes') AS AverageRuntime
FROM Movie_Rating
WHERE genres LIKE '%animation%'
--- for adventure movies
SELECT CONCAT(CEILING(AVG(runtime)), ' minutes') AS AverageRuntime
FROM Movie_Rating
WHERE genres LIKE '%adventure%'
-- for thriller movies
SELECT CONCAT(CEILING(AVG(runtime)), ' minutes') AS AverageRuntime
FROM Movie_Rating
WHERE genres LIKE '%romance%'
-- for horror movies
SELECT CONCAT(CEILING(AVG(runtime)), ' minutes') AS AverageRuntime
FROM Movie_Rating
WHERE genres LIKE '%horror%'
-- for comedy movies
SELECT CONCAT(CEILING(AVG(runtime)), ' minutes') AS AverageRuntime
FROM Movie_Rating
WHERE genres LIKE '%comedy%'
-- for drama movies
SELECT CONCAT(CEILING(AVG(runtime)), ' minutes') AS AverageRuntime
FROM Movie_Rating
WHERE genres LIKE '%drama%'


---- total revenue generated by movies after 2000 

-- world wide
SELECT FORMAT(SUM(revenue), 'N0') AS RevenueGenerated
FROM Movie_Rating
-- in the United States
SELECT FORMAT(SUM(revenue), 'N0') AS RevenueGenerated
FROM Movie_Rating
WHERE year(release_date) >= 2000 AND production_countries LIKE '%US%' 


---- count of movies made by each production company


SELECT 
CASE 
    WHEN production_companies LIKE '%name%' THEN production_companies
	ELSE 'Not Recognized'
END AS production_companies, 
COUNT(*) NumberOfMovies
FROM Movie_Rating
GROUP BY production_companies
ORDER BY NumberOfMovies DESC


---- 20 highest rated movie


SELECT TOP 20 movie_title 
FROM Movie_Rating
WHERE vote_count > 999 AND movie_title NOT LIKE '%å%'
GROUP BY movie_title, vote_average
HAVING vote_average = MAX(vote_average)
ORDER BY MAX(vote_average) DESC


---- 10 movies with the highest average based on voting volume


SELECT TOP 10 movie_title,
CASE 
    WHEN vote_count = 0 THEN 0  
    ELSE ROUND((vote_count * (SUM(vote_average * vote_count) / SUM(vote_count))) / (vote_count + 1), 1)
END AS weighted_average
FROM Movie_Rating
WHERE movie_title NOT LIKE '%å%'
GROUP BY movie_title, vote_count
ORDER BY weighted_average DESC


---- ratings for genres


-- rating for action movies
WITH TEMP1 AS (
SELECT genres,
CASE 
    WHEN vote_count = 0 THEN 0  
    ELSE ROUND((vote_count * (SUM(vote_average * vote_count) / SUM(vote_count))) / (vote_count + 1), 1)
END AS weighted_average
FROM Movie_Rating
WHERE genres LIKE '%action%'
GROUP BY genres, vote_count
 )
SELECT ROUND(AVG(weighted_average), 1) AvgRatingGenre
FROM TEMP1
-- rating for drama movies
WITH TEMP2 AS (
SELECT genres,
CASE 
    WHEN vote_count = 0 THEN 0  
    ELSE ROUND((vote_count * (SUM(vote_average * vote_count) / SUM(vote_count))) / (vote_count + 1), 1)
END AS weighted_average
FROM Movie_Rating
WHERE genres LIKE '%drama%'
GROUP BY genres, vote_count
 )
SELECT ROUND(AVG(weighted_average), 1) AvgRatingGenre
FROM TEMP2
-- rating for animation movies
WITH TEMP3 AS (
SELECT genres,
CASE 
    WHEN vote_count = 0 THEN 0  
    ELSE ROUND((vote_count * (SUM(vote_average * vote_count) / SUM(vote_count))) / (vote_count + 1), 1)
END AS weighted_average
FROM Movie_Rating
WHERE genres LIKE '%animation%'
GROUP BY genres, vote_count
 )
SELECT ROUND(AVG(weighted_average), 1) AvgRatingGenre
FROM TEMP3
-- rating for romance movies
WITH TEMP4 AS (
SELECT genres,
CASE 
    WHEN vote_count = 0 THEN 0  
    ELSE ROUND((vote_count * (SUM(vote_average * vote_count) / SUM(vote_count))) / (vote_count + 1), 1)
END AS weighted_average
FROM Movie_Rating
WHERE genres LIKE '%romance%'
GROUP BY genres, vote_count
 )
 SELECT ROUND(AVG(weighted_average), 1) AvgRatingGenre
FROM TEMP4
-- rating for comedy movies
WITH TEMP5 AS (
SELECT genres,
CASE 
    WHEN vote_count = 0 THEN 0  
    ELSE ROUND((vote_count * (SUM(vote_average * vote_count) / SUM(vote_count))) / (vote_count + 1), 1)
END AS weighted_average
FROM Movie_Rating
WHERE genres LIKE '%comedy%'
GROUP BY genres, vote_count
 )
 SELECT ROUND(AVG(weighted_average), 1) AvgRatingGenre
FROM TEMP5
-- rating for horror movies
WITH TEMP6 AS (
SELECT genres,
CASE 
    WHEN vote_count = 0 THEN 0  
    ELSE ROUND((vote_count * (SUM(vote_average * vote_count) / SUM(vote_count))) / (vote_count + 1), 1)
END AS weighted_average
FROM Movie_Rating
WHERE genres LIKE '%horror%'
GROUP BY genres, vote_count
 )
 SELECT ROUND(AVG(weighted_average), 1) AvgRatingGenre
FROM TEMP6


---- ratings in a specific language


SELECT 
CASE
    WHEN original_language = 'ja' THEN 'Japanese'
    WHEN original_language = 'it' THEN 'Italian'
    WHEN original_language = 'pt' THEN 'Portuguese'
    WHEN original_language = 'fr' THEN 'French'
	WHEN original_language = 'de' THEN 'German'
	WHEN original_language = 'es' THEN 'Spanish'
	WHEN original_language = 'ko' THEN 'Korean'
	WHEN original_language = 'de' THEN 'German'
	WHEN original_language = 'id' THEN 'Indonesian' 
	WHEN original_language = 'en' THEN 'English'
END AS Languages, 
                 ROUND(AVG(vote_average), 1) AverageRatingPerLanguage
FROM Movie_Rating
WHERE vote_count > 999
GROUP BY original_language
ORDER BY AVG(vote_average) DESC


---- movie with the longest screen time


SELECT TOP 1 movie_title, CONCAT(runtime, ' minutes') ScreenTime, production_companies, genres, 
                        original_language, FORMAT(revenue, 'N0') RevenueInDollars, vote_average
FROM Movie_Rating
GROUP BY movie_title, runtime, production_companies, genres, original_language, revenue, vote_average
HAVING runtime = MAX(runtime) 
ORDER BY MAX(runtime) DESC


---- 10 most used languages in the dataset


SELECT	TOP 10 CASE
    WHEN original_language = 'ja' THEN 'Japanese'
    WHEN original_language = 'it' THEN 'Italian'
    WHEN original_language = 'cn' THEN 'Chinese'
    WHEN original_language = 'fr' THEN 'French'
	WHEN original_language = 'hi' THEN 'Hindi'
	WHEN original_language = 'es' THEN 'Spanish'
	WHEN original_language = 'ko' THEN 'Korean'
	WHEN original_language = 'de' THEN 'German'
	WHEN original_language = 'zh' THEN 'Mandarin Chinese' 
	WHEN original_language = 'en' THEN 'English'
	ELSE original_language
END AS Languages, COUNT(*) NumberOfMovies
FROM Movie_Rating
GROUP BY original_language
ORDER BY NumberOfMovies DESC



